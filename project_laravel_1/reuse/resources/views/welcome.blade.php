@extends('Layouts.navbar')

@section('content')
<div style="direction: rtl; text-align: right;">

        <h1 style="text-align: center">
           بسم الله الرحمان الرحيم 
        </h1>
        <br>
        <h4>
           تقرير حول إعادة الاستخدام البرمجيات  and mvc pattern .
        </h4>   
        <p>
            <b>مقدمة</b>
            <br>
            إعادة استخدام البرمجيات هي واحدة من المبادئ الأساسية لتطوير البرمجيات الفعّال. في إطار العمل 
            Laravel، يُعتبر نمط MVC (Model-View-Controller) أحد الأركان الأساسية التي تساهم في تنظيم وهيكلة التطبيقات بطريقة تسهّل إعادة الاستخدام وتطوير التطبيقات بكفاءة
            . يتيح نمط MVC الفصل بين منطق الأعمال business logic، والعرض view، والتفاعل مع المستخدم، مما يجعل الكود أكثر قابلية للصيانة وإعادة الاستخدام
        </p>
            <div>
              <img src="{{ asset('images/mvc.png') }}" alt="My Image" style="width:700px; height:300; float: left; margin-right: 40px;" >
            </div>
            <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
</div>



<div style="direction: rtl; text-align: right;">
        <p>
            <b>نمط MVC في Laravel</b><br>
            نمط MVC في Laravel يتألف من ثلاثة مكونات رئيسية: <br>
            1 <b>النموذج(Model)</b>: يمثل الطبقة التي تتعامل مع البيانات وقاعدة البيانات. يشتمل على منطق الأعمال business logic وقواعد البيانات، ويتعامل مع استرجاع وتحديث البيانات.

            2 <b>العرض (View)</b>: يمثل الطبقة التي تتعامل مع واجهة المستخدم. يُستخدم لعرض البيانات بطريقة معينة، ولا يحتوي على منطق الأعمال.
            <div>
                <img src="{{ asset('images/mvclaravel.png') }}" alt="My Image" style="width:700px; height:300; " >
            </div>
{{-- <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br> --}}
            3 <b>المتحكم (Controller)</b>: يتعامل مع المنطق الذي يربط بين النموذج والعرض. يقوم بمعالجة الطلبات وتحديث البيانات في النموذج، ثم يقوم بتحديث العرض بناءً على البيانات الجديدة.
        </p>
<div>
    <img src="{{ asset('images/controll.png') }}" alt="My Image" style="width:700px; height:300; " >
</div>
</div>


<div style="direction: rtl; text-align: right;">
    <p>
        <b>إعادة الاستخدام في نمط MVC</b><br>
        <b>1. إعادة استخدام النموذج (Model)</b><br>
        يمكن إعادة استخدام النماذج بشكل كبير عند الحاجة إلى التعامل مع نفس نوع البيانات عبر تطبيقات مختلفة أو مكونات مختلفة من نفس التطبيق. 
        <br>على سبيل المثال: <br>
       <b>نماذج عامة</b>: يمكنك إنشاء نماذج عامة لإدارة بيانات المستخدمين، المنتجات، أو أي بيانات أخرى يمكن أن تكون مشتركة بين تطبيقات متعددة.

       <b>2. إعادة استخدام العرض (View)</b><br>
      <b>القوالب المشتركة:</b>في Laravel، يمكنك استخدام Blade لإنشاء قوالب عرض مشتركة تُستخدم عبر التطبيق. على سبيل المثال، يمكن إنشاء قالب رئيسي للواجهة يمكن إعادة استخدامه في جميع الصفحات.
     <br> <b>مكونات العرض:</b>ستخدام مكونات صغيرة ومحددة في Blade مثل المكونات، والتي يمكن إعادة استخدامها لعرض أجزاء معينة من واجهة المستخدم مثل الأزرار، النماذج، والقوائم
  
     <b>3. إعادة استخدام المتحكم (Controller)</b><br>
     <b>تحكمات مشتركة:</b>يمكن إعادة استخدام منطق التحكم المشترك عبر تطبيقات متعددة. على سبيل المثال، إذا كان لديك منطق تسجيل دخول مشترك بين تطبيقات متعددة، يمكنك إعادة استخدام نفس الكود في المتحكم.
      <br> <b>توسيع المتحكمات:</b>في Laravel، يمكن وراثة المتحكمات وتوسيعها لإضافة وظائف جديدة دون الحاجة إلى إعادة كتابة الكود الأساسي.
    </p>
</div>

<div style="direction: rtl; text-align: right;">
    <b>الخاتمة</b>
        إعادة استخدام نمط MVC في Laravel يعزز من كفاءة وفعالية تطوير البرمجيات.
        من خلال فصل منطق الأعمال عن واجهة المستخدم والتفاعل، 
        يمكن للمطورين إعادة استخدام المكونات البرمجية بسهولة وتحسين صيانة التطبيقات، 
        مما يؤدي إلى تقليل الوقت والجهد اللازمين للتطوير وتحسين جودة البرمجيات.
</div>
<br><br><br>
@endsection
